; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; The following line defined if the build is for 32 or 64 bits
#define BUILD_TYPE = 64

; The following line defined if the build is a nightly build and it's the SVN number
#define CB_VERSION        ='SVN-12487'

#define CB_SrcDir         =SourcePath+'\..'
#if BUILD_TYPE == 32
#define CB_BuildOutputDir =SourcePath+'\..\src\output31'
#else
#define CB_BuildOutputDir =SourcePath+'\..\src\output31_64'
#endif
#define CB_PROGRAMDIRNAME ='CodeBlocks_TEST'
#define CURRENT_DATE      = GetDateTimeString('ddmmmyyyy', '', '')
#define CURRENT_DATE_YEAR = GetDateTimeString('yyyy', '', '')
#define CURRENT_DATE_MONTH = GetDateTimeString('mm', '', '')
#define CURRENT_DATE_DAY = GetDateTimeString('dd', '', '')

#define DICTIONARIES_DIR  =SourcePath+'\Dictionaries'
#define DOCUMENTATION_DIR =SourcePath+'Documentation'
#define GRAPHICS_DIR      =SourcePath+'Graphics'
#define LICENSES_DIR      =SourcePath+'Licenses'

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{53BB99B2-5263-43B9-A46A-C92E63AAA96F}
AppName=Code::Blocks
AppVerName=Code::Blocks {#CB_VERSION}
AppPublisher=Code::Blocks
DefaultDirName={pf}\{#CB_PROGRAMDIRNAME}
DefaultGroupName={#CB_PROGRAMDIRNAME}
LicenseFile={#LICENSES_DIR}\gpl-3.0.txt
#if BUILD_TYPE == 32
OutputBaseFilename=CodeBlocks-{#CB_VERSION}-32bit-setup-{#CURRENT_DATE}-ISS-FULLONLY
#else
OutputBaseFilename=CodeBlocks-{#CB_VERSION}-64bit-setup-{#CURRENT_DATE}-ISS-FULLONLY
#endif
AppPublisherURL=www.codeblocks.org
AppVersion={#CB_VERSION}-{#CURRENT_DATE_YEAR}.{#CURRENT_DATE_MONTH}.{#CURRENT_DATE_DAY}.0
UninstallDisplayIcon={app}\codeblocks.exe
UninstallDisplayName=Code::Blocks
ShowLanguageDialog=no
AppSupportURL=www.codeblocks.org
AppUpdatesURL=www.codeblocks.org
;InfoAfterFile=.\COMPILERS_win32.rtf
InternalCompressLevel=ultra
SolidCompression=true
Compression=lzma/ultra
InfoBeforeFile=
;VersionInfoVersion={#CB_VERSION}
VersionInfoCompany=Code::Blocks
VersionInfoCopyright=(C) Code::Blocks
VersionInfoDescription=Code::Blocks IDE
VersionInfoProductName=Code::Blocks IDE
VersionInfoProductVersion={#CURRENT_DATE_YEAR}.{#CURRENT_DATE_MONTH}.{#CURRENT_DATE_DAY}.0
VersionInfoProductTextVersion={#CB_VERSION}-{#CURRENT_DATE_YEAR}.{#CURRENT_DATE_MONTH}.{#CURRENT_DATE_DAY}.0
SourceDir={#CB_BuildOutputDir}
OutputDir={#SourcePath}
DisableWelcomePage=False
PrivilegesRequired=none
WizardImageFile={#GRAPHICS_DIR}\setup_1.bmp
WizardSmallImageFile={#GRAPHICS_DIR}\setup_logo_2003.bmp
WizardImageStretch=yes
SetupIconFile={#GRAPHICS_DIR}\setup_icon.ico
#if BUILD_TYPE == 64
; "ArchitecturesAllowed=x64" specifies that Setup cannot run on anything but x64.
ArchitecturesAllowed=x64
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be done in "64-bit mode" on x64, meaning it should use the native 64-bit Program Files directory and the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64
#endif

[Tasks]
Name: startmenu;          Description: "Create a &startmenu entry";   GroupDescription: "Additional icons:";
Name: desktopicon;        Description: "Create a &desktop icon";      GroupDescription: "Additional icons:"; Flags: exclusive
Name: desktopicon\common; Description: "For all users";               GroupDescription: "Additional icons:"; Flags: exclusive
Name: desktopicon\user;   Description: "For the current user only";   GroupDescription: "Additional icons:"; Flags: exclusive unchecked
Name: quicklaunchicon;    Description: "Create a &Quick Launch icon"; GroupDescription: "Additional icons:"; Flags: exclusive

[Files]
Source: "*"; DestDir: "{app}"; Flags: ignoreversion createallsubdirs recursesubdirs; Excludes: "*.a"
Source: "{#DICTIONARIES_DIR}\*"; DestDir: "{app}\share\CodeBlocks\SpellChecker"; Flags: ignoreversion createallsubdirs recursesubdirs
Source: "{#DOCUMENTATION_DIR}\manual_codeblocks_en.chm"; DestDir: "{app}\share\CodeBlocks\docs"; Flags: ignoreversion
Source: "{#DOCUMENTATION_DIR}\manual_codeblocks_en.pdf"; DestDir: "{app}\share\CodeBlocks\docs"; Flags: ignoreversion
Source: "{#DOCUMENTATION_DIR}\manual_codeblocks_fr.chm"; DestDir: "{app}\share\CodeBlocks\docs"; Flags: ignoreversion
Source: "{#DOCUMENTATION_DIR}\manual_codeblocks_fr.pdf"; DestDir: "{app}\share\CodeBlocks\docs"; Flags: ignoreversion
Source: "{#DOCUMENTATION_DIR}\Manual_wxPBGuide.pdf"; DestDir: "{app}\share\CodeBlocks\docs"; Flags: ignoreversion
Source: "{#LICENSES_DIR}\gpl-3.0.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#LICENSES_DIR}\lgpl-3.0.txt"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: {group}\{#CB_PROGRAMDIRNAME};               Filename: {app}\codeblocks.exe; IconIndex: 0; WorkingDir: {app}; Comment: Code::Blocks IDE;
Name: {group}\{cm:UninstallProgram, codeblocks};  Filename: {uninstallexe};
Name: {group}\CodeBlocks License;                 Filename: {app}\gpl-3.0.txt;                                     Comment: Code::Blocks license;
Name: {group}\CodeBlocks SDK License;             Filename: {app}\lgpl-3.0.txt;                                    Comment: Code::Blocks SDK license;
Name: {userdesktop}\{#CB_PROGRAMDIRNAME};         Filename: {app}\codeblocks.exe; IconIndex: 0; WorkingDir: {app}; Comment: Code::Blocks IDE;
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#CB_PROGRAMDIRNAME}; Filename: {app}\codeblocks.exe; IconIndex: 0; WorkingDir: {app}; Comment: Code::Blocks IDE; Tasks: quicklaunchicon;

Name: {group}\Links\CodeBlocks PDF Manual English;    Filename: "{app}\share\CodeBlocks\docs\manual_codeblocks_en.pdf";Comment: The Code::Blocks PDF User Manual in English;
Name: {group}\Links\CodeBlocks CHM Manual English;    Filename: "{app}\share\CodeBlocks\docs\manual_codeblocks_en.chm";Comment: The Code::Blocks CHM User Manual in English;
Name: {group}\Links\CodeBlocks PDF Manual French;     Filename: "{app}\share\CodeBlocks\docs\manual_codeblocks_fr.pdf";Comment: The Code::Blocks PDF User Manual in French;
Name: {group}\Links\CodeBlocks CHM Manual French;     Filename: "{app}\share\CodeBlocks\docs\manual_codeblocks_fr.chm";Comment: The Code::Blocks CHM User Manual in French;
Name: {group}\Links\PB Guide wxWidgets;   Filename: "{app}\share\CodeBlocks\docs\Manual_wxPBGuide.pdf";    Comment: PBs GuiDe to Starting with wxWidgets with MinGW and Code::Blocks;

Name: {group}\Links\CodeBlocks Web Site;              Filename: "http://www.codeblocks.org";                      Comment: Go to Code::Blocks IDE website;
Name: {group}\Links\CodeBlocks Forums;                Filename: "http://forums.codeblocks.org";                   Comment: Go to Code::Blocks IDE discussion forums;
Name: {group}\Links\CodeBlocks WiKi;                  Filename: "http://wiki.codeblocks.org";                     Comment: Go to Code::Blocks IDE WiKi site;
Name: {group}\Links\CodeBlocks Tickets;               Filename: "https://sourceforge.net/p/codeblocks/tickets/";  Comment: Report bugs/enhancements for Code::Blocks; Tasks: startmenu;
Name: {group}\Links\Codeblocks beginner instructions; Filename: "http://www.sci.brooklyn.cuny.edu/~goetz/codeblocks/codeblocks-instructions.pdf";  Comment: Code::Blocks beginner install and user guide;

[Run]
Filename: {app}\codeblocks.exe; Description: Launch Code::Blocks; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{app}"
Type: files;          Name: {userdesktop}\{#CB_PROGRAMDIRNAME}
Type: files;          Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#CB_PROGRAMDIRNAME}

[Code]
// ================================================================================================================================================================
// Uninstall
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usUninstall:
      begin
        // Check if user codeblocks app data directory exists
        if DirExists(ExpandConstant('{userappdata}\CodeBlocks'))
        then begin
          // Prompt the user to delete all his settings, default to "No"
          if MsgBox('Would you like to keep your user settings?', mbConfirmation, MB_YESNO or MB_DEFBUTTON1) = IDNO 
          then begin
              DelTree(ExpandConstant('{userappdata}\CodeBlocks'), True, True, True);
          end;
        end;
      end;
    usPostUninstall:
      begin
      end;
  end;
end;

// ================================================================================================================================================================
var
  DownloadPage: TDownloadWizardPage;

function OnDownloadProgress(const Url, FileName: String; const Progress, ProgressMax: Int64): Boolean;
begin
  if Progress = ProgressMax then
    Log(Format('Successfully downloaded file to {tmp}: %s', [FileName]));
  Result := True;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  FileName: string;
  ResultCode: Integer;
begin
  if CurPageID = wpReady 
  then begin
    // Prompt the user to see if they want to download the MIngW installer, default to "No"
    if MsgBox('Would you like to download the Mingw64 installer and run it?', mbConfirmation, MB_YESNO or MB_DEFBUTTON1) = IDYES 
    then begin

      DownloadPage.Clear;
      DownloadPage.Add('https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe', 'mingw-w64-install.exe', '');
      DownloadPage.Show;
      try
        try
          DownloadPage.Download; // This downloads the files to {tmp}
          FileName := ExpandConstant('{tmp}\mingw-w64-install.exe');
          Result := Exec(FileName, '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
          if not Result 
            then begin
              MsgBox('Cannot execute mingw-w64-install.exe', mbError, MB_OK);
            end
          else
            begin
              Result := (ResultCode = 0);
              if not Result then
              begin
                MsgBox('Failed to install mingw-w64-install.exe', mbError, MB_OK);
              end
          end;
        except
          if DownloadPage.AbortedByUser then
            Log('Aborted by user.')
          else
            SuppressibleMsgBox(AddPeriod(GetExceptionMessage), mbCriticalError, MB_OK, IDOK);
          Result := False;
        end;
      finally
        DownloadPage.Hide;
      end;
    end else
      // User did not want to download the installer. 
      Result := True;
  end else
    Result := True;
end;
// ================================================================================================================================================================
{ ///////////////////////////////////////////////////////////////////// }
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


{ ///////////////////////////////////////////////////////////////////// }
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;


{ ///////////////////////////////////////////////////////////////////// }
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
{ Return Values: }
{ 1 - uninstall string is empty }
{ 2 - error executing the UnInstallString }
{ 3 - successfully executed the UnInstallString }

  { default return value }
  Result := 0;

  { get the uninstall string of the old app }
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

// ================================================================================================================================================================
procedure InitializeWizard();
begin
    if (IsUpgrade()) then
    begin
      // Prompt the user to see if they want to download the MIngW installer, default to "No"
      if MsgBox('Would you like to uninstall the previous Code::Blopcks installed version before installing this new version?', mbConfirmation, MB_YESNO or MB_DEFBUTTON1) = IDYES 
      then begin
        UnInstallOldVersion();
      end;
    end;

    DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), @OnDownloadProgress);
end;

// ================================================================================================================================================================
